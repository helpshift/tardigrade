(ns tardigrade.circuit-breaker
  (:require [tardigrade.circuit-breaker.counter :as tcc]
            [tardigrade.circuit-breaker.sliding-window :as tcs]
            [tardigrade.circuit-breaker.timer :as tct]
            [tardigrade.circuit-breaker.protocols :as tcp]))

;;;; Public API ;;;;;


(defn init-circuit-breaker
  []
  (atom {}))

(defn register-circuit-breaker
  "ctx - Circuit breaker context generated by init-circuit-breaker
   circuit-breaker-name - Name of external dependency. Only keywords allowed.
                          Ex. :redis, :postgres
   config - {:timeout Amount of time a circuit will remain tripped. In millis.
             :threshold How many exceptions does it take to trip a cricuit
             :statsd-prefix Statsd prefix
             :failure-pred Predicate to decide if exception is failure or not.
                           This should be used to only trip circuit conditionally.
                           Ex. Trip a circuit for SocketException
                           Default - Treats every exception as a failure}"
  [ctx circuit-breaker-name {:keys [timeout failure-pred threshold window-size
                                    trip-strategy]
                             :or {trip-strategy :sliding-window}
                             :as config}]
  {:pre [(map? (deref ctx))
         (keyword? circuit-breaker-name)
         (map? config)
         (#{:counter :timer :sliding-window} trip-strategy)
         (integer? timeout)
         (or (nil? failure-pred)
             (fn? failure-pred))
         (integer? threshold)
         (integer? window-size)]}
  (swap! ctx
         assoc-in [circuit-breaker-name :config]
         (merge {:statsd-prefix "tardigrade.circuit_breaker"}
                config))

  (swap! ctx
         assoc-in [circuit-breaker-name :record]
         (case trip-strategy
           :counter (tcc/create-counter-trippable circuit-breaker-name
                                                  {:timeout timeout
                                                   :window-size window-size
                                                   :failure-pred failure-pred
                                                   :threshold threshold})
           :sliding-window (tcs/create-sliding-window-trippable circuit-breaker-name
                                                                {:timeout timeout
                                                                 :window-size window-size
                                                                 :failure-pred failure-pred
                                                                 :threshold threshold})
           :timer (tct/create-timer-trippable circuit-breaker-name
                                              {:timeout timeout
                                               :window-size window-size
                                               :threshold threshold
                                               :threshold-time (:threshold-time config)
                                               :body-fn-timeout (:body-fn-timeout config)}))))


(defn with-circuit-breaker-fn
  "ctx - Circuit breaker context generated by init-circuit-breaker
   circuit-breaker-name - Name of external dependency. Prefer keywords.
                          Ex. :redis, :postgres
   body-fn - thunk to run"
  [ctx circuit-breaker-name body-fn]
  (let [cb-config (get-in @ctx [circuit-breaker-name :config])
        cb-record (get-in @ctx [circuit-breaker-name :record])]
    (if cb-record
      (if (tcp/tripped? cb-record)
        (do
          ;; (statsd/increment-counter :monitor
          ;;                        (str (get cb-config
          ;;                                  :statsd-prefix)
          ;;                             ".tripped"))
          (throw (ex-info "Circuit breaker tripped"
                          {:tripped? true})))
        (let [[status res] (tcp/run-body cb-record body-fn)]
          (if (= status ::tcp/success)
            (do ;; (statsd/increment-counter :monitor
                ;;                        (str (get cb-config
                ;;                                  :statsd-prefix)
                ;;                             ".success"))
                res)
            (do ;; (statsd/increment-counter :monitor
                ;;                        (str (get cb-config
                ;;                                  :statsd-prefix)
                ;;                             ".failure"))
                (when res
                  (throw res))))))
      (do ;; (log :warn
          ;;      "Circuit breaker not registered"
          ;;      nil
          ;;      {}
          ;;      {:circuit-breaker-name circuit-breaker-name})
          (body-fn)))))


(defmacro with-circuit-breaker
  [ctx circuit-breaker-name & body]
  `(with-circuit-breaker-fn ~ctx ~circuit-breaker-name
     (fn []
       ~@body)))


(defn circuit-tripped?
  [ctx circuit-breaker-name]
  (tcp/tripped? (get-in @ctx
                        [circuit-breaker-name :record])))
